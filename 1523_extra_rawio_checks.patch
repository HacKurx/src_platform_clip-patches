From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vincent Strubel <clipos@ssi.gouv.fr>
Date: Thu, 6 Sep 2012 18:31:47 +0200
Subject: [PATCH 23/32] clip: drivers: Check for CAP_SYS_RAWIO before allowing
 any PCI configuration

Inspir√© par http://lkml.org/lkml/2012/9/4/220

Patch: 1523_extra_rawio_checks.patch
---
 drivers/acpi/custom_method.c |  3 +++
 drivers/char/mem.c           |  3 +++
 drivers/pci/pci-sysfs.c      | 12 ++++++++++++
 drivers/pci/proc.c           |  6 ++++++
 drivers/pci/syscall.c        |  3 +++
 5 files changed, 27 insertions(+)

diff --git a/drivers/acpi/custom_method.c b/drivers/acpi/custom_method.c
index e86300825f417..983fa985d0517 100644
--- a/drivers/acpi/custom_method.c
+++ b/drivers/acpi/custom_method.c
@@ -33,6 +33,9 @@ static ssize_t cm_write(struct file *file, const char __user * user_buf,
 	return -EPERM;
 #endif
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	if (!(*ppos)) {
 		/* parse the table header to get the table length */
 		if (count <= sizeof(struct acpi_table_header))
diff --git a/drivers/char/mem.c b/drivers/char/mem.c
index 5c41c1c12c7d4..fed3219eefa7a 100644
--- a/drivers/char/mem.c
+++ b/drivers/char/mem.c
@@ -648,6 +648,9 @@ static ssize_t write_port(struct file *file, const char __user *buf,
 	unsigned long i = *ppos;
 	const char __user *tmp = buf;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	if (!access_ok(VERIFY_READ, buf, count))
 		return -EFAULT;
 	while (count-- > 0 && i < 65536) {
diff --git a/drivers/pci/pci-sysfs.c b/drivers/pci/pci-sysfs.c
index 5422e88412bbb..7fc0b5e447329 100644
--- a/drivers/pci/pci-sysfs.c
+++ b/drivers/pci/pci-sysfs.c
@@ -723,6 +723,9 @@ static ssize_t pci_write_config(struct file *filp, struct kobject *kobj,
 	loff_t init_off = off;
 	u8 *data = (u8 *) buf;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	if (off > dev->cfg_size)
 		return 0;
 	if (off + count > dev->cfg_size) {
@@ -1018,6 +1021,9 @@ static int pci_mmap_resource(struct kobject *kobj, struct bin_attribute *attr,
 	resource_size_t start, end;
 	int i;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	for (i = 0; i < PCI_ROM_RESOURCE; i++)
 		if (res == &pdev->resource[i])
 			break;
@@ -1069,6 +1075,9 @@ static ssize_t pci_resource_io(struct file *filp, struct kobject *kobj,
 	unsigned long port = off;
 	int i;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	for (i = 0; i < PCI_ROM_RESOURCE; i++)
 		if (res == &pdev->resource[i])
 			break;
@@ -1117,6 +1126,9 @@ static ssize_t pci_write_resource_io(struct file *filp, struct kobject *kobj,
 				     struct bin_attribute *attr, char *buf,
 				     loff_t off, size_t count)
 {
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	return pci_resource_io(filp, kobj, attr, buf, off, count, true);
 }
 
diff --git a/drivers/pci/proc.c b/drivers/pci/proc.c
index 5333feca02cf1..7f913707cde2a 100644
--- a/drivers/pci/proc.c
+++ b/drivers/pci/proc.c
@@ -116,6 +116,9 @@ static ssize_t proc_bus_pci_write(struct file *file, const char __user *buf,
 	int size = dev->cfg_size;
 	int cnt;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	if (pos >= size)
 		return 0;
 	if (nbytes >= size)
@@ -195,6 +198,9 @@ static long proc_bus_pci_ioctl(struct file *file, unsigned int cmd,
 #endif /* HAVE_PCI_MMAP */
 	int ret = 0;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	switch (cmd) {
 	case PCIIOC_CONTROLLER:
 		ret = pci_domain_nr(dev->bus);
diff --git a/drivers/pci/syscall.c b/drivers/pci/syscall.c
index b91c4da683657..9a6e98f6cad11 100644
--- a/drivers/pci/syscall.c
+++ b/drivers/pci/syscall.c
@@ -92,6 +92,9 @@ SYSCALL_DEFINE5(pciconfig_write, unsigned long, bus, unsigned long, dfn,
 	u32 dword;
 	int err = 0;
 
+	if (!capable(CAP_SYS_RAWIO))
+		return -EPERM;
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
-- 
2.17.0

